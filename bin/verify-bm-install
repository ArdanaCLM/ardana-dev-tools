#!/bin/bash
#
# (c) Copyright 2015-2016 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Called by CI
#

set -eux
set -o pipefail

eval "$($(dirname "$(readlink -e "${BASH_SOURCE[0]}")")/ardana-env)"

source $(dirname $0)/libci.sh

verifybmscript=verify-bm.sh
CLOUDNAME="${1:-"deployerincloud"}"
DEPLOYERNODE="$(get_deployer_node)"

cat > $verifybmscript << "EOF"
#!/bin/bash

set -eux
set -o pipefail

pushd "${HOME}/openstack/ardana/ansible"

export PYTHONUNBUFFERED=1
# Note: This must _NOT_ go into the default ansible config.
export ANSIBLE_MAX_FAIL_PERCENTAGE=0

git add -A
git commit --allow-empty -m "My commit"

# Generates the host_verbs file
ansible-playbook \
    -i hosts/localhost \
    config-processor-run.yml -e encrypt="" -e rekey=""

ansible-playbook \
    -i hosts/localhost \
    ready-deployment.yml

cd "${HOME}/scratch/ansible/next/ardana/ansible"

# The VMs may not be up yet so we need to retry. We can't handle this in
# the playbook because the set of nodes is determined by Ansible and we
# don't have access to the list of unreachable nodes (ttbomk) in our tasks.
set +e
n=0
until (( n > 9 ))
do
    ansible-playbook \
        -i hosts/verb_hosts \
        bm-verify.yml 2>&1 |
      tee ${HOME}/bm-verify.log
    retval=$?
    if (( $retval == 0 )) ; then
        break
    fi
    (( n++ ))
    sleep 30
done
set -e
if (( $retval != 0 )) ; then
    exit $retval
fi
EOF

sshconfig=deploy-vagrant-ssh-config
vagrant ssh-config $DEPLOYERNODE 2>>"${VAGRANT_LOG_DIR}/${sshconfig}.log" > $sshconfig

scp -F $sshconfig $verifybmscript $DEPLOYERNODE:~
ssh -F $sshconfig $ARDANAUSER@$DEPLOYERNODE bash $verifybmscript
