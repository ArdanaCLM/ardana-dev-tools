#!/bin/bash
#
# (c) Copyright 2019 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Run through the Ardana upgrade workflow to update the Cloud
# from Cloud8 to Cloud9, for selected Devel or Product stream.
#

set -ex
set -o pipefail

cmd_name="$(basename ${BASH_SOURCE[0]})"
cmd_dir="$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")"
adt_top="$(dirname "${cmd_dir}")"
ansible_dir="${adt_top}/ansible"
log_file="${adt_top}/logs/${cmd_name}.log"

eval "$(${cmd_dir}/ardana-env)"

. ${cmd_dir}/lib/service_groups.sh
. ${cmd_dir}/lib/deployer_utils.sh

usage() {
    set +x
    echo "${cmd_name} [options] [cloud]"
    echo
    echo "cloud defaults to 'adt', a minimal 2 node cloud"
    echo
    echo "--all-services      -- Enable all services in initial Cloud8 deployment."
    echo "--adv-services      -- Enable advanced services in initial Cloud8 deployment."
    echo "--basic-services    -- Enable basic services in initial Cloud8 deployment."
    echo "--min-services      -- Enable minimal services in initial Cloud8 deployment."
    echo "--no-mml-services   -- Disable all related MML services in Cloud8 deployment."
    echo "--hos               -- Use the HOS flavour of Cloud8; SOC is default."
    echo "--c8-run-tests      -- Tempest test the C8 cloud before upgrade."
    echo "--devel             -- Test DC8 ==> DC9 upgrade."
    echo "--enable            -- Specify service-component to enable. (repeatable)"
    echo "--disable           -- Specify service-component to disable. (repeatable)"
    echo "--staging           -- Test DC8S ==> DC9S upgrade. (default)"
    echo "--updates           -- Test C8+Updates ==> C9+Updates upgrade."
    echo "--updates-test      -- Test C8+Updates-test ==> C9+Updates-test upgrade."
    echo "--no-setup          -- Don't run dev-env-install.yml."
    echo "--no-update-rpms    -- Don't build RPMs from local clones."
    echo "--pre-destroy       -- Destroy any existing instance of cloud first."
    echo "--rhel-compute      -- Enable RHEL computes."
    echo "--sles-compute      -- Enable SLES computes (default)."
}

# Manage list of long options as a sorted array of option names which
# we then join with commas to form the argument to getopt
long_opts=(
    all-services
    adv-services
    basic-services
    ci
    c8-run-tests
    hos
    devel
    disable
    enable
    updates
    updates-test
    help
    min-services
    no-mml-services
    no-setup
    no-update-rpms
    pre-destroy
    rhel-compute
    sles-compute
    staging
)

# join long_opts members with ","
printf -v OPTIONS ",%s" "${long_opts[@]:1}"
OPTIONS="${long_opts[0]}${OPTIONS}"

TEMP=$(getopt -o -h -l $OPTIONS -n $cmd_name -- "${@}")
if (( $? != 0 ))
then
    echo "Terminating..." >&2
    exit 1
fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

pre_destroy=
zypper_method=dist-upgrade
common_args=()
cloud_type=
cloud8_args=( --c8 )
cloud9_args=( --c9 )
svc_groups_to_enable=()
svc_groups_to_disable=()

while true ; do
    case "${1}" in
    (-h|--help)
        usage
        exit 0
        ;;
    (--no-*-services)
        svc_group="${1#--no-}"
        svc_group="${svc_group%-services}"
        svc_groups_to_disable+=( "${svc_group}" )
        shift
        ;;
    (--*-services)
        svc_group="${1#--}"
        svc_group="${svc_group%-services}"
        svc_groups_to_enable+=( "${svc_group}" )
        shift
        ;;
    (--enable)
        set_service_state "${2}" true
        shift 2
        ;;
    (--disable)
        set_service_state "${2}" false
        shift 2
        ;;
    (--c8-run-tests)
        cloud8_args+=( "--run-tests" )
        shift
        ;;
    (--hos)
        cloud8_args+=( "--c8-hos" )
        shift
        ;;
    (--devel|--staging|--updates|--updates-test)
        cloud_type="${1:2}"
        shift
        ;;
    (--rhel-compute|--sles-compute)
        ;&
    (--ci|--no-setup|--no-update-rpms)
        common_args+=( "${1}" )
        shift
        ;;
    (--pre-destroy)
        pre_destroy="${1}"
        shift
        ;;
    (--)
        shift
        break
        ;;
    (*)
        break
        ;;
    esac
done

# default to Staging cloud sources if none specified
if [[ -z "${cloud_type:-}" ]]
then
    cloud_type=staging
fi

# Set the desired cloudsource for both clouds
cloud8_args+=( "--c8-${cloud_type}" )
cloud9_args+=( "--c9-${cloud_type}" )

# Setup default service group enablement/disablement
if (( ${#svc_groups_to_enable[@]} == 0 ))
then
    svc_groups_to_enable+=( all )
fi
#if (( ${#svc_groups_to_disable[@]} == 0 ))
#then
#    # disable until MML stack services are upgradable
#    svc_groups_to_disable+=( mml )
#fi

# Determine cloud_name and associated vagrant_dir
cloud_name="${1:-adt}"
vagrant_dir="${adt_top}/ardana-vagrant-models/${cloud_name}-vagrant"

# Setup specified services for Cloud 8 deployment
setup_services_groups 8 svc_groups_to_enable svc_groups_to_disable

# Add --disabled-services entries to cloud8_args
generate_disabled_services_entries cloud8_args

# Initialise the deployer utils environment BEFORE any output direction
setup_deployer_utils "${cloud_name}"

# log stdout & stderr to file as well as terminal
# NOTE: may need to use less -R to read log content if running against a terminal
exec > >(tee "${log_file}")
exec 2>&1

set -x

# Retrieve artifacts needed for both Cloud8 and Cloud9 runs
${cmd_dir}/astack.sh \
    "${common_args[@]}" \
    "${cloud8_args[@]}" \
    ${pre_destroy} \
    --no-cloud \
    "${cloud_name}"

find "${adt_top}/../C8_NEW_RPMS" -type f -name "*.rpm"

# no need to run setup phase again, so skip in future astack invocations
common_args+=( --no-setup )

${cmd_dir}/astack.sh \
    "${common_args[@]}" \
    "${cloud9_args[@]}" \
    --no-cloud \
    "${cloud_name}"

find "${adt_top}/../C9_NEW_RPMS" -type f -name "*.rpm"

# all artifacts have been retrieved so no need to retrieve again
common_args+=( --no-artifacts )

# all version specific override RPMs have been built at this point
# so no need to build again.
common_args+=( --no-update-rpms )

# Force re-creation of the local input-model cache
rm -rf "${vagrant_dir}/input-model"

# Bring up the cloud, using already fetched artifacts, optionally
# running tempest tests to confirm correct operation.
${cmd_dir}/astack.sh \
    "${common_args[@]}" \
    "${cloud8_args[@]}" \
    "${cloud_name}"

source ${cmd_dir}/libci.sh

pushd "${ansible_dir}"

if [[ -n "${switch_to_fernet_before_upgrade:-}" ]]
then
    #
    # Switch Keystone to using fernet token provider
    #

    # use cloud8-keystone-switch-to-fernet to switch to fernet token provider
    deployer_run ${cmd_dir}/deployer/cloud8-keystone-switch-to-fernet

    # run config-cloud.sh to regenerate the scratch area with updated Ardana inputs.
    deployer_run ${cmd_dir}/deployer/config-cloud.sh

    # run keystone-deploy playbook to apply changes
    ardana_scratch_run_playbook \
        all \
        keystone-deploy
fi

#
# Switch deployer repos from Cloud8/SP3 to Cloud9/SP4
#

# disable/remove existing zypper repos on the deployer
${cmd_dir}/ardana --cloud ${cloud_name} \
    ansible-playbook \
        -i hosts/cloud.yml \
        --limit deployer \
        ${ansible_dir}/cloud-repos-update.yml \
        -e zypper_repo_enabled=no \
        -e zypper_repo_state=absent

# remove the C8-Overrides repo from other nodes
deployer_ssh "cd scratch/ansible/next/ardana/ansible && ansible -b 'resources:!OPS-LM--first-member' -m shell -a 'zypper rr C8-Overrides' || true"

# Switch to upgrade cloud settings
${cmd_dir}/astack.sh \
    "${common_args[@]}" \
    "${cloud9_args[@]}" \
    --no-cloud \
    "${cloud_name}"

# create/enable upgrade zypper repos
${cmd_dir}/ardana --cloud ${cloud_name} \
    ansible-playbook \
        -i hosts/cloud.yml \
        cloud-deployer-repos.yml

# dist-upgrade deployer from SLE 12 SP3 to SLE 12 SP4
deployer_ssh sudo zypper dist-upgrade -ly

# Install/Update Cloud pattern packages and run ardana-init, but skip model init
${cmd_dir}/ardana --cloud ${cloud_name} \
    ansible-playbook \
        -i hosts/cloud.yml \
        cloud-deployer-init.yml \
        -e skip_model_init

# run the cloud9-input-model-upgrade script on the deployer
deployer_run ${cmd_dir}/deployer/cloud9-input-model-upgrade

# run config-cloud.sh to regenerate the scratch area with updated Ardana inputs.
deployer_run ${cmd_dir}/deployer/config-cloud.sh

# run the upgrade playbook for all nodes
ardana_scratch_run_playbook \
    all \
    ardana-upgrade

# Reboot all nodes (but the deployer node) one at a time.
non_deployer_nodes=( $(deployer_ssh "cd scratch/ansible/next/ardana/ansible && ansible 'resources:!OPS-LM--first-member' --list-hosts" | tr -s '[[:space:]]' ' ') )
for node in "${non_deployer_nodes[@]}"
do
    ardana_scratch_run_playbook \
        "${node}" \
        ardana-reboot
done

# this will fail saying deployer node needs to be manually rebooted
# and that we need to run _ardana-post-reboot.yml after rebooting.
ardana_scratch_run_playbook \
    OPS-LM--first-member \
    ardana-reboot || true

# Now "manually" reboot the deployer node
${cmd_dir}/ardana --cloud ${cloud_name} \
    ansible-playbook \
        -i hosts/cloud.yml \
        ${ansible_dir}/cloud-deployer-reboot.yml

# now run the _ardana_post-reboot.yml playbook to bring the services online again
ardana_scratch_run_playbook \
    OPS-LM--first-member \
    _ardana-post-reboot

# use run-tests.sh to validate cloud is working correctly
deployer_run ${cmd_dir}/deployer/run-tests.sh ci ${cloud_name}

# vim:shiftwidth=4:tabstop=4:expandtab
