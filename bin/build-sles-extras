#!/bin/bash
#
# (c) Copyright 2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

set -eux
set -o pipefail

eval "$($(dirname "$(readlink -e "${BASH_SOURCE[0]}")")/ardana-env)"

SCRIPT_NAME=$(basename $0)
SCRIPT_HOME=$(cd $(dirname $0) ; pwd)

usage() {
    set +x
    echo "$SCRIPT_NAME [--help] [--ci] [--no-artifacts] [--stop]"
    echo
    echo "Manage all aspects of the venv building."
    echo "This includes downloading any needed artifacts, building vargant"
    echo "box images, bringing up the build VM's, and finally building any"
    echo "or all venv packages."
    echo
    echo "--ci           -- Run in CI mode."
    echo "--no-artifacts -- Don't fetch any required artifacts, assume we"
    echo "                  have them already."
    echo "--no-stop      -- Don't destroy the build VM's after generating"
    echo "                  updated SLES extras tarball."
}

TEMP=$(getopt -o h -l help,ci,no-artifacts,no-build,no-stop -n $SCRIPT_NAME -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

NO_ARTIFACTS=
NO_BUILD=
NO_STOP=

while true ; do
    case "$1" in
        -h | --help) usage ; exit 0 ;;
        --ci) export ARDANAUSER=ardanauser ; shift ;;
        --no-artifacts) NO_ARTIFACTS=1 ; shift ;;
        --no-build) NO_BUILD=1 ; shift ;;
        --no-stop) NO_STOP=1 ; shift ;;
        --) shift ; break ;;
        *) break ;;
    esac
done

source "$(dirname $0)/libci.sh"

# Need to have SLES artifacts and want to use SLES Net Repos
export ARDANA_SLES_ARTIFACTS=true
export ARDANA_SLES_NET_REPOS=true

# Skip fetching artifacts if specified
if [ -z "$NO_ARTIFACTS" ]; then
    $SCRIPT_HOME/build-distro-artifacts
fi

# Skip building new tarball if specified
if [ -z "$NO_BUILD" ]; then
    pushd "$DEVTOOLS/build-vagrant"

    # Bringing up SLES Build VM with ARDANA_SLES_NET_REPOS set
    # will trigger generation of updated SLES extras tarball
    $SCRIPT_HOME/deploy-vagrant-up build-sles12

    # Stop VM unless specified not to
    [ -z "$NO_STOP" ] && vagrant destroy build-sles12

    popd
fi

tmp_dir=$(mktemp -d /tmp/.$SCRIPT_NAME.XXXXXXXX)

if ! ansible-playbook -i $DEVTOOLS/ansible/hosts/localhost \
        $DEVTOOLS/ansible/get-sles-extras-tarball-path.yml \
        >$tmp_dir/stdout 2>$tmp_dir/stderr; then
    cat $tmp_dir/stdout $tmp_dir/stderr
    exit 1
fi

eval $(grep '"msg": "SLES_EXTRAS_TARBALL=' $tmp_dir/stdout | cut -d : -f 2 | tr -d '" ')

rm -rf $tmp_dir

extras_upload_name=$(date -u -r $SLES_EXTRAS_TARBALL +'sles12sp3-extras-%Y%m%d-%H%M%S.tgz')
extras_upload_path=$(readlink -f $DEVTOOLS/../$extras_upload_name)

cp -p $SLES_EXTRAS_TARBALL $extras_upload_path

set +x
echo ""
echo "SLES Extras Tarball Upload File: $extras_upload_path"
