#!/bin/bash
#
# (c) Copyright 2015-2016 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Called by CI
#

set -eux
set -o pipefail

eval "$($(dirname "$(readlink -e "${BASH_SOURCE[0]}")")/ardana-env)"

SCRIPT_NAME=$(basename $0)
SCRIPT_HOME=$(cd $(dirname $0) ; pwd)

usage() {
    set +x
    echo "$SCRIPT_NAME [ARGS]"
    echo
    echo "Get logs from the system"
}

TEMP=$(getopt -o -h -l help,ci -n $SCRIPT_NAME -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

# Assume CI until we can clean this up.
CI=yes

while true ; do
    case "$1" in
        -h | --help) usage ; exit 0 ;;
        --ci)
            export ARDANAUSER=${ARDANAUSER:-ardana}
            export CI=yes
            shift ;;
        --) shift ; break;;
        *) break ;;
    esac
done

source $(dirname $0)/libci.sh

WORKSPACE=${WORKSPACE:-$PWD}
ARDANA_CLOUD_NAME="${1:-"adt"}"
DEPLOYERNODE="$(awk '/^deployer_node/ {gsub(/\"/,"",$3);print $3}' Vagrantfile)"

# Don't set -e as even on failure it worth trying to get logs.
set +e

# Download the Ansible logs from the deployer.
# Note: This should be similar to the console log but it what we can get
#       from a customer
scp -F $ARDANA_VAGRANT_SSH_CONFIG $ARDANAUSER@$DEPLOYERNODE:~/.ansible/ansible.log ${WORKSPACE}

# Download the config processor info/HTML layout directly.
scp -F $ARDANA_VAGRANT_SSH_CONFIG -r $ARDANAUSER@$DEPLOYERNODE:~/openstack/my_cloud/info ${CP_LOG_DIR}
scp -F $ARDANA_VAGRANT_SSH_CONFIG -r $ARDANAUSER@$DEPLOYERNODE:~/openstack/my_cloud/html ${CP_LOG_DIR}

# Download tempest logs from the deployer for uploading in logs.gozer
ssh -F $ARDANA_VAGRANT_SSH_CONFIG $ARDANAUSER@$DEPLOYERNODE sudo chmod 0644 /opt/stack/tempest/configs/tempest_*.conf
scp -F $ARDANA_VAGRANT_SSH_CONFIG $ARDANAUSER@$DEPLOYERNODE:/opt/stack/tempest/logs/{*.log,*.subunit} ${WORKSPACE}
scp -F $ARDANA_VAGRANT_SSH_CONFIG $ARDANAUSER@$DEPLOYERNODE:/opt/stack/tempest/configs/tempest_*.conf ${WORKSPACE}
scp -F $ARDANA_VAGRANT_SSH_CONFIG $ARDANAUSER@$DEPLOYERNODE:/opt/stack/hqe/*.subunit ${WORKSPACE}

# Collate all tempest subunit files into one for DB injection
cat ${WORKSPACE}/testrepository*.subunit >> ${WORKSPACE}/tempest_all.subunit

for tempest_conf in $(ls ${WORKSPACE}/tempest_*.conf); do
    mv $tempest_conf "${tempest_conf%.conf}_conf.txt";
done

# ensure libvirt owned console log files are checked to current user
sudo chown -R $(id -u):$(id -g) ${CONSOLE_LOG_DIR}
# successful exit this script - don't return the status of the last command

# get these logs last, as a failure here will result in exiting with non-zero
logsubunit --inprogress sosreport-run
$SCRIPT_HOME/run-in-deployer.sh $SCRIPT_HOME/deployer/run-sosreport.sh &&
    scp -F $ARDANA_VAGRANT_SSH_CONFIG $ARDANAUSER@$DEPLOYERNODE:/tmp/sosreport-report-archives/* ${WORKSPACE} || logfail sosreport-run
logsubunit --success sosreport-run

exit 0
