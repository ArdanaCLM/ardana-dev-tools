#!/bin/bash
#
# (c) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Called in CI
#
# In parallel we run the following
# - deploy_base_release
# - build_latest_packages
# Then run
# - upgrade_cloud
#

set -eu
set -o pipefail

eval "$($(dirname "$(readlink -e "${BASH_SOURCE[0]}")")/ardana-env)"

SCRIPT_NAME=$(basename $0)
export SCRIPT_HOME=$(cd $(dirname $0) ; pwd)
export DEVTOOLS=$(dirname $SCRIPT_HOME)
export WORKSPACE=${WORKSPACE:-$PWD}
export ARDANA_UPGRADE_DEPLOY_TIMEOUT=${ARDANA_UPGRADE_DEPLOY_TIMEOUT:-18000}

export PYTHONUNBUFFERED=1

# We download vagrant images from Gozer that are built with this user
export ARDANAUSER=${ARDANAUSER:-ardana}

# Usage
usage() {
    set +x
    echo "$SCRIPT_NAME [--ci] [--kit release_kit] [cloud]"
    echo
    echo "cloud defaults to deployerincloud"
    echo "release_kit is the name of a release artifact defined in"
    echo "ansible/roles/artifacts/defaults/main.yml"
    echo
    echo "--ci                  -- Set options for running in the cdl"
    echo "--restrict-by-project -- See astack.sh --help"
    echo "--rhel-node           -- Name a node we want to deploy on RHEL"
    echo "--sles-node           -- Name a node we want to deploy on SLES"
}

TEMP=$(getopt -o h -l help,ci,kit:,restrict-by-project:,rhel-node:,sles-node: -n $SCRIPT_NAME -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

CI=
RELEASE_KIT=
export ARDANA_RHEL_COMPUTE_NODES=${ARDANA_RHEL_COMPUTE_NODES:-}
export ARDANA_SLES_COMPUTE_NODES=${ARDANA_SLES_COMPUTE_NODES:-}

while true ; do
    case "$1" in
        -h | --help) usage ; exit 0 ;;
        --ci)
            export CI=yes
            shift;;
        --kit) RELEASE_KIT=$2 ; shift 2 ;;
        --restrict-by-project) export ZUUL_PROJECT=$2 ; shift 2 ;;
        --rhel-node)
            export ARDANA_RHEL_ARTIFACTS=1
            ARDANA_RHEL_COMPUTE_NODES="${ARDANA_RHEL_COMPUTE_NODES}${ARDANA_RHEL_COMPUTE_NODES:+:}$2"
            shift 2 ;;
        --sles-node)
            export ARDANA_SLES_ARTIFACTS=1
            ARDANA_SLES_COMPUTE_NODES="${ARDANA_SLES_COMPUTE_NODES}${ARDANA_SLES_COMPUTE_NODES:+:}$2"
            shift 2 ;;
        --) shift ; break;;
        *) break ;;
    esac
done

set -x

# Updagre the base cloud
upgrade_cloud() {
    local cloud=$1

    pushd $DEVTOOLS/ardana-vagrant-models/${cloud}-vagrant
    $SCRIPT_HOME/run-in-deployer.sh $SCRIPT_HOME/deployer/add-openstack-clients.sh
    $SCRIPT_HOME/run-in-deployer.sh $SCRIPT_HOME/deployer/add-tempest-service.sh
    env ARDANA_BUILD_PACKAGE=False $SCRIPT_HOME/deploy-vagrant-upgrade $cloud
}

# Parallel framework
declare -a subprocess

kill_processes() {
    local pid=$1
    local child

    kill -stop $pid || return 0
    for child in $( ps -o pid --no-headers --ppid $pid ); do
        kill_processes $child
    done
    kill -9 $pid
}

killoff_tasks() {
    set -x
    local pids=${!subprocess[@]}

    # If we get error we don't want to fail to kill off the other jobs
    for pid in $pids ; do
        kill_processes $pid
    done

    wait
}

checkpids() {
    local pids=${!subprocess[@]}
    local pid

    for pid in $pids ; do
        if ! ps -p $pid >/dev/null; then
            if ! wait $pid ; then
                echo "Wait on $pid (${subprocess[$pid]}) returned"
                if [ ${subprocess[$pid]:-} ] ; then
                    echo "${subprocess[$pid]} subprocess failed"
                else
                    echo "Could not find subprocess associated with pid ${pid}"
                fi

                cat ${WORKSPACE:-$PWD}/${subprocess[$pid]}.log

                unset subprocess[$pid]
                killoff_tasks

                exit 1
            else
                unset subprocess[$pid]
            fi
        fi
    done
}

trap killoff_tasks SIGINT SIGTERM SIGKILL

run_in_parallel() {
    local cmd="$1"
    shift

    local logfile=$(basename $cmd)

    $cmd $* &> $WORKSPACE/${logfile}.log &
    subprocess[$!]=$logfile
}

test_cloud() {
    local cloud=$1
    $SCRIPT_HOME/test-artifacts upgrade-ci $cloud ci
}

# Start running in parallel
cloud=${1:-deployerincloud}

# Setup
source $SCRIPT_HOME/libci.sh

pushd $DEVTOOLS/ansible
ansible-playbook -i hosts/localhost dev-env-install.yml
popd

# We download vagrant images from Gozer that are built with
# this user
export ARDANAUSER=ardanauser

# During deploy & upgrade of the standard environment in CI make one node a RHEL one
# This will test RHEL upgrade & deployment support
# This block is duplicated in astack.sh also.
if test -n "$CI" -a "$cloud" = "standard" || test -n "$ARDANA_RHEL_COMPUTE_NODES" ; then
    # Test RHEL deploy & upgrade
    export ARDANA_RHEL_ARTIFACTS=1
    export ARDANA_RHEL_COMPUTE_NODES=${ARDANA_RHEL_COMPUTE_NODES:-COMPUTE-0003}

fi

# During deploy & upgrade of the standard environment in CI make one node a SLES one
# This will test SLES upgrade & deployment support
if test -n "$CI" -a "$cloud" = "standard" || test -n "$ARDANA_SLES_COMPUTE_NODES" ; then
    export ARDANA_SLES_COMPUTE_NODES=${ARDANA_SLES_COMPUTE_NODES:-COMPUTE-0002}
fi

# Default to SLES as we only support upgrade Ardana 8 ==> Ardana 8+ on SLES.
export ARDANA_SLES_ARTIFACTS=1

if test -n "$CI" -a "$cloud" = "standard" || test -n "$ARDANA_RHEL_COMPUTE_NODES" \
                                         || test -n "$ARDANA_SLES_COMPUTE_NODES" ; then

    # This script gets the latest Ardana artifacts including Cloud, RHEL, and SLES ISOs.
    $SCRIPT_HOME/build-distro-artifacts
fi

# Run upgrade and build in parallel
run_in_parallel timeout ${ARDANA_UPGRADE_DEPLOY_TIMEOUT} \
                $SCRIPT_HOME/lib/run_upgrade_deploy_base_release $cloud $RELEASE_KIT
run_in_parallel $SCRIPT_HOME/lib/run_upgrade_build_latest_packages

set +x
while [ ${#subprocess[@]} -gt 0 ]; do
    echo "Waiting for builds ${subprocess[@]} to finish: $(date)" >&2
    sleep 10

    checkpids
done
set -x

upgrade_cloud $cloud
test_cloud $cloud
