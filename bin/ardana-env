#!/bin/bash -eu
#
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Bootstrap the runtime environment to enable running Ardana development
# environment:
#   * ensure that the bootstrap ansible venv exists and is in PATH, and
#     output required shell commands to set it up correctly in the users
#     environment.
#   * create the Vagrant version specific home area if needed and output
#     required shell commands to set it up correctly in the users
#     environment.
#
# The output of this command it intended to be evaluated by the caller
# to update their environment settings.
#

set -eu
set -o pipefail

get_distro_family()
{
    if grep -qs ID_LIKE /etc/os-release
    then
        grep ID_LIKE /etc/os-release | \
            cut -d= -f2 | \
            tr -d '"' | \
            tr -d "'" | \
            cut -d " " -f1 | \
            tr -d '[:space:]'
    elif grep -qs 'ID="sles"' /etc/os-release
    then
        echo suse
    fi
}

is_opensuse_tumbleweed()
{
    [[ -r /etc/os-release ]] && \
        grep -qs "^NAME=.openSUSE Tumbleweed.$" /etc/os-release
}

is_opensuse_leap()
{
    [[ -r /etc/os-release ]] && \
        grep -qs "^NAME=.openSUSE Leap.$" /etc/os-release
}

is_opensuse_leap15()
{
    is_opensuse_leap && \
        grep -qs "^VERSION=.15[.][0-9]\+.$" /etc/os-release
}

is_ubuntu()
{
    [[ ( -x /usr/bin/lsb_release ) && ( "$(lsb_release -is)" == "Ubuntu" ) ]]
}

is_trusty()
{
    [[ ( -x /usr/bin/lsb_release ) && ( "$(lsb_release -cs)" == "trusty" ) ]]
}

is_xenial()
{
    [[ ( -x /usr/bin/lsb_release ) && ( "$(lsb_release -cs)" == "xenial" ) ]]
}

is_bionic()
{
    [[ ( -x /usr/bin/lsb_release ) && ( "$(lsb_release -cs)" == "bionic" ) ]]
}

is_eoan()
{
    [[ ( -x /usr/bin/lsb_release ) && ( "$(lsb_release -cs)" == "eoan" ) ]]
}

version_at_least()
{
    local cur="${1}" tgt="${2}"

    # true if cur >= tgt
    [[ "${cur}" == "$(printf '%s\n' ${cur} ${tgt} | sort -rV | head -n1)" ]]
}

# We may need to prepend new path elements to PATH
path_prefix=""

# May need some minimal packages to be able to create an ansible venv
req_pkgs=()

# Additional python modules to be installed in the ansible bootstrap venv
req_pips=()

venv_cmd=/usr/bin/virtualenv

# Can the user successfully sudo? No, add the user using sudo
if ! sudo -k -n true > /dev/null 2>&1 && [[ -d /etc/sudoers.d ]]
then
    # Append to sudoers file
    echo "${USER} ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee "/etc/sudoers.d/${USER}" > /dev/null
fi

# Determine which command will be used to install packages, and distro
# family specific settings
# NOTES:
#   * debian and suse use different names for Python development package
#   * debian and suse use different paths for package docs
distro_family=$(get_distro_family)
case "${distro_family}" in
(debian)
    pkg_install="sudo env DEBIAN_FRONTEND=noninteractive apt-get --quiet --yes install"
    if is_trusty
    then
        # On Trusty CI nodes virtualenv is installed under /usr/local/bin
        if [[ -x /usr/local/bin/virtualenv ]]
        then
            venv_cmd=/usr/local/bin/virtualenv
        fi
    fi
    [[ -e /usr/include/python2.7/Python.h ]] || req_pkgs+=( python-dev )
    pkg_docs_dir=/usr/share/doc
    ;;
(opensuse|suse)
    pkg_install="sudo zypper install --no-confirm"
    [[ -e /usr/include/python2.7/Python.h ]] || req_pkgs+=( python-devel )
    pkg_docs_dir=/usr/share/doc/packages
    ;;
(*)
    echo "Unsupported distro family: '${distro_family}'"
    exit 1
    ;;
esac

# Need git to interogate branch state
[[ -x /usr/bin/git ]] || req_pkgs+=( git-core )

# Need gcc to build wheels
[[ -x /usr/bin/gcc ]] || req_pkgs+=( gcc )

# Need rsync to mirror repos
[[ -x /usr/bin/rsync ]] || req_pkgs+=( rsync )

# Need wget to restrieve files via URLs
[[ -x /usr/bin/wget ]] || req_pkgs+=( wget )

# Need gawk command
[[ -x /usr/bin/gawk ]] || req_pkgs+=( gawk )

# Need virtualenv command
if [[ ! -x ${venv_cmd} ]]
then
    if is_opensuse_leap15 || is_opensuse_tumbleweed
    then
        req_pkgs+=( python2-virtualenv )
    else
        req_pkgs+=( python-virtualenv )
    fi
fi

# Need some system Python packages installed, Python2 versions in
# some cases, and it is preferrable to check for the required packages
# without triggering package cache refreshes, so we check if the
# the associated directory under ${pkg_docs_dir} exists.
_needed_modules=( setuptools )
if is_trusty || is_eoan
then
    # python-sh is not available as a package for Ubuntu Trusty
    req_pips+=( sh )
else
    _needed_modules+=( sh )
fi
_pyver=
if is_opensuse_leap15 || is_opensuse_tumbleweed
then
    _pyver=2
fi
# For xenial we need to pin to an earlier version of setuptools to avoid
# Python version dependency issues.
if is_xenial
then
    _setuptools_ver="<45"
else
    _setuptools_ver=""
fi

for m in "${_needed_modules[@]}"
do
    _pkg_name="python${_pyver}-${m}"
    if [[ ! -d "${pkg_docs_dir}/${_pkg_name}" ]]
    then
        req_pkgs+=( ${_pkg_name} )
    fi
done

# Need osc to be able to build SOC/CLM RPMs
osc_cmd=/usr/bin/osc
if [[ ! -x ${osc_cmd} ]] || ! version_at_least $(${osc_cmd} --version) 0.162
then
    req_pkgs+=( osc )
    if is_ubuntu
    then
        # Trusty version of osc is way too old, Xenial version is old,
        # so we set up to install latest available (x)Ubuntu version
        # available from OBS repos
        osc_list="/etc/apt/sources.list.d/osc.list"
        osc_repos=( "http://download.opensuse.org/repositories/openSUSE:/Tools/xUbuntu_$(lsb_release -rs)" )
        if is_xenial || is_bionic
        then
            # Workaround broken osc Python3 based packaging changes that
            # currently only work for Eoan (19.10) and Focal (20.04) that
            # have a python3-m2crypto package available. Not a problem
            # for existing installs as the latest official osc package
            # is not installable, but breaks new deployments. This
            # repo installs the same basic version of osc as the current
            # broken package, but reverts to the debian packaging config
            # just prior to the switchover to being Python3 based.
            osc_repos+=( "https://download.opensuse.org/repositories/home:/fmccarthy:/branches:/openSUSE:/Tools/xUbuntu_$(lsb_release -rs)/" )
        fi
        # If the osc.list repo source hasn't been added, then set it up here
        if [[ ! -e ${osc_list} ]]
        then
            echo "Add OBS Tools repo to system APT repos" 1>&2
            for osc_repo in "${osc_repos[@]}"
            do
                wget -q -O - ${osc_repo}/Release.key | sudo apt-key add - 1>&2
                echo "deb ${osc_repo}/ ./" | sudo tee -a ${osc_list} 1>&2
            done
            sudo apt-get --quiet --yes update 1>&2

            echo "Removing any existing Ubuntu osc related packages" 1>&2
            sudo apt-get --quiet --yes remove --purge osc obs-build 1>&2
        fi
        req_pkgs+=( obs-build )
    fi

    for p in download_files format_spec_file obs_scm recompress set_version source_validator tar_scm
    do
        # for ubuntu need to remap '_' to '-' in package names
        is_ubuntu && p=${p//_/-}
        req_pkgs+=( obs-service-${p} )
    done
fi

# Install required packages if needed
if (( ${#req_pkgs[@]} > 0 ))
then
    echo "Required packages: ${req_pkgs[@]}" 1>&2
    ${pkg_install} "${req_pkgs[@]}" 1>&2
fi

#
# Common settings
#
ardana_cache="${HOME}/.cache-ardana"
bootstrap_venvs="${ardana_cache}/venvs"
cmd_dir="$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")"
adt_root="$(dirname "${cmd_dir}")"
logs_root="${adt_root}/logs"

# ${adt_root}/logs is a symlink to ../logs, so create that
[[ -d "${logs_root}" ]] || (cd "${adt_root}/.."; mkdir -p logs)

#
# Vagrant plugin location settings
#
vagrant_version=${ARDANA_VAGRANT_VERSION:-2.2.9}
vagrant_base=${ardana_cache}/vagrant/${vagrant_version}
vagrant_home=${vagrant_base}/home
# We could inherit any existing vagrant home setting by
# uncommenting the following line, but that would mean
# that if a user switched to a new vagrant version after
# having eval'd ardana-env's output, they would not get
# and updated VAGRANT_HOME setting, and would then be
# installing vagrant plugins for the newer version in
# the older version's home area.
#vagrant_home=${VAGRANT_HOME:-${vagrant_base}/home}

# Have we been told to create a "clean" environment?
# If so then delete the existing vagrant home here
if [[ "${1:-}" == "--clean" ]]
then
    echo 1>&2 "Cleaning out existing Vagrant ${vagrant_version} home..."
    rm -rf "${vagrant_home}"
fi

# Ensure the specified vagrant_home exists
if [[ ! -d "${vagrant_home}" ]]
then
    echo 1>&2 "Creating Vagrant ${vagrant_version} home..."
    mkdir -p ${vagrant_home}
fi

echo "Setting VAGRANT_HOME to '${vagrant_home}'" 1>&2
echo "VAGRANT_HOME=${vagrant_home};"
echo "export VAGRANT_HOME;"

#
# Ansible bootstrap venv setup
#

# Ansible settings
ansible_version=${ARDANA_ANSIBLE_VERSION:-2.7.15}
bootstrap_ansible="${bootstrap_venvs}/ansible-${ansible_version}"
ansible_log="${ANSIBLE_LOG_PATH:-${logs_root}/vm_host_ansible.log}"

# Have we been told to create a "clean" environment?
# If so then delete the existing ansible venv here
if [[ "${1:-}" == "--clean" ]]
then
    echo 1>&2 "Cleaning out existing Ansible ${ansible_version} venv..."
    rm -rf "${bootstrap_ansible}"
fi

# Create the bootstrap ansible venv if it doesn't exist
if [[ ! -d "${bootstrap_ansible}" ]]
then
    echo 1>&2 "Creating Ansible ${ansible_version} venv..."
    ${venv_cmd} --python python2.7 "${bootstrap_ansible}" 1>&2
    ${bootstrap_ansible}/bin/pip install --upgrade pip wheel "setuptools${_setuptools_ver}" 1>&2
fi

# Install specified ansible version in the bootstrap venv if necessary
if [[ ! -x "${bootstrap_ansible}/bin/ansible-playbook" ]];
then
    ${bootstrap_ansible}/bin/pip install "ansible==${ansible_version}" 1>&2
fi

# If additional pips are specified in the req_pips, install them if needed
if (( ${#req_pips[@]} > 0 ))
then
    echo "Required pips: ${req_pips[@]}" 1>&2
    for pip in "${req_pips[@]}"
    do
        if ! (${bootstrap_ansible}/bin/pip freeze | cut -d= -f1 | grep -qs "^${pip}$") 1>&2
        then
            ${bootstrap_ansible}/bin/pip install "${pip}" 1>&2
        fi
    done
fi

# Check if ansible bootstrap venv already in path, and if not, add it
case :${PATH}: in
(*:${bootstrap_ansible}/bin:*)
    echo "Already using ansible venv '${bootstrap_ansible}'" 1>&2
    ;;
(*)
    echo "Using ansible venv '${bootstrap_ansible}'" 1>&2
    path_prefix="${bootstrap_ansible}/bin${path_prefix:+:${path_prefix}}"
    ;;
esac

echo "ANSIBLE_LOG_PATH=${ansible_log};"
echo "export ANSIBLE_LOG_PATH;"

# If we needed to update the path settings
if [[ -n "${path_prefix}" ]]
then
    echo "PATH=${path_prefix}:\$PATH;"
    echo "export PATH;"

    # Ensure shell sessions re-evaluate command lists
    case "${SHELL}" in
    (*/bash|*/zsh)
        echo "hash -r;"
        ;;
    esac
fi

# vim:shiftwidth=4:tabstop=4:expandtab
