#!/bin/bash
#
# (c) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Called by CI infrastructure to run the cobber CI
#

set -eux
set -o pipefail

eval "$($(dirname "$(readlink -e "${BASH_SOURCE[0]}")")/ardana-env)"

SCRIPT_NAME=$(basename $0)
SCRIPT_HOME=$(cd $(dirname $0) ; pwd)

usage() {
    set +x
    echo "$(basename $0) [cloud]"
    echo
    echo "cloud defaults to deployerincloud"
    echo
    echo "--c8                -- Configure options to run in Cloud8 mode (default)"
    echo "--c8-hos            -- Use the HOS flavour of Cloud8"
    echo "--c8-soc            -- Use the SOC flavour of Cloud8"
    echo "--c8-mirror         -- Enable Cloud8 repo mirroring (default)"
    echo "--c8-devel          -- USE DC8 repos"
    echo "--c8-staging        -- USE DC8S repos"
    echo "--c8-updates        -- USE Cloud8 Pool + Updates repos"
    echo "--c8-updates-test   -- USE Cloud8 Pool + Update-tests repos"
    echo "--c9                -- Configure options to run in Cloud9 mode"
    echo "--c9-mirror         -- Enable Cloud9 repo mirroring"
    echo "--c9-devel          -- USE DC9 repos"
    echo "--c9-staging        -- USE DC9S repos"
    echo "--c9-updates        -- USE Cloud9 Pool + Updates repos"
    echo "--c9-updates-test   -- USE Cloud9 Pool + Update-tests repos"
    echo "--no-setup          -- Don't run dev-env-install.yml"
    echo "--no-artifacts      -- Don't retrieve/build artifacts, reuse existing"
    echo "--no-build          -- Don't build venvs, reuse existing packages"
    echo "--pre-destroy       -- Destroy any existing instance of cloud first"
    echo "--tarball <tarball> -- Use the specified legacy deployer tarball"
    echo "--rhel-compute      -- Enable RHEL compute re-imaging."
    echo "--sles-control      -- Enable SLES control re-imaging."
    echo "--sles-compute      -- Enable SLES compute re-imaging."
}

# Manage list of long options as a sorted array of option names which
# we then join with commas to form the argument to getopt
long_opts=(
    c8
    c8-devel
    c8-hos
    c8-mirror
    c8-soc
    c8-staging
    c8-updates
    c8-updates-test
    c9
    c9-devel
    c9-mirror
    c9-staging
    c9-updates
    c9-updates-test
    ci
    help
    legacy
    no-artifacts
    no-build
    no-setup
    pre-destroy
    rhel-compute
    sles-compute
    sles-control
    tarball:
)

# join long_opts members with ","
printf -v OPTIONS ",%s" "${long_opts[@]:1}"
OPTIONS="${long_opts[0]}${OPTIONS}"

TEMP=$(getopt -o -h -l $OPTIONS -n $SCRIPT_NAME -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

args=(
    --no-config
    --no-site
)

MODE=

while true ; do
    case "$1" in
        -h | --help) usage ; exit 0 ;;
        --c8|-c9)
            MODE=soc
            args+=( $1 )
            shift ;;
        --c8-*|-c9-*)
            MODE=soc
            args+=( $1 )
            shift ;;
        --rhel-compute)
            args+=( --cobble-rhel-compute )
            shift ;;
        --sles-control)
            args+=( --cobble-sles-control )
            shift ;;
        --sles-compute)
            args+=( --cobble-sles-compute )
            shift ;;
        --no-setup|--no-artifacts|--no-build|--pre-destroy)
            args+=( $1 )
            shift ;;
        --tarball)
            args+=( $1 $2 )
            shift 2;;
        --) shift ; break;;
        *) break ;;
    esac
done

# Configure vagrant user account settings, etc, based on mode,
# defaulting to SOC/CLM mode if none specified.
[[ -z "${MODE}" ]] && MODE=soc
case "${MODE}" in
(soc)
    _user=ardana
    _home_base=/var/lib
    ;;
esac

# Needed for verify-bm-install
export ARDANAUSER=${ARDANAUSER:-${_user}}
export ARDANA_USER_HOME_BASE=${ARDANA_USER_HOME_BASE:-${_home_base}}

args+=(
    --skip-extra-playbooks
    --cobble-all-nodes
)

set -x

CLOUDNAME=${1:-dac-min}
args+=( $CLOUDNAME )


export ARDANA_PACKAGES_DIST='["packager", "ansible", "ardana-service", "config_processor", "installer-server", "installer-ui"]'
export ARDANA_PACKAGES_NONDIST='[]'

source $SCRIPT_HOME/libci.sh

pushd $DEVTOOLS/ardana-vagrant-models/${CLOUDNAME}-vagrant

# Bring up the system
$SCRIPT_HOME/astack.sh "${args[@]}"

$SCRIPT_HOME/verify-bm-install $CLOUDNAME

# vim:shiftwidth=4:tabstop=4:expandtab
