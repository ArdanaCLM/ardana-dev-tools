#
# (c) Copyright 2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

# Mount ISOs attached to deployer as cdroms on appropriate mount points
---

- include: install-isoinfo.yml

- name: deployer | setup-isos | Determine which ISOs are attached
  shell: |
    set -eux
    set -o pipefail

    dev="{{ item }}"

    if [[ -b "${dev}" ]]; then
        isoinfo -d -i "${dev}" | grep "^Volume id:" | cut -d ' ' -f 3-
    fi
  args:
    executable: "/bin/bash"
  with_items:
    - /dev/sr0
    - /dev/sr1
    - /dev/sr2
    - /dev/sr3
  register: _isoinfo_result

- debug:
    msg: "{{ _isoinfo_result }}"

# /media/cdrom is a symlink to /media/cdrom0
- name: deployer | setup-isos | Generate map of ISOs to mount
  set_fact:
    iso_mounts: >
      {%- set _mnts = _deployer_iso_mounts %}
      {%- set _map = [] %}
      {%- for res in _isoinfo_result.results %}
      {%-   if res.stdout | lower | startswith('hlinux') %}
      {%-     set _ = _map.append(dict(dev=res.item, dir=_mnts.hlinux)) %}
      {%-   elif res.stdout | lower | startswith('rhel-') %}
      {%-     set _ = _map.append(dict(dev=res.item, dir=_mnts.rhel)) %}
      {%-   elif res.stdout | lower | startswith('sle-') %}
      {%-     if '-sdk-' not in res.stdout | lower %}
      {%-       set _ = _map.append(dict(dev=res.item, dir=_mnts.sles)) %}
      {%-     else %}
      {%-       set _ = _map.append(dict(dev=res.item, dir=_mnts.sles_sdk)) %}
      {%-     endif %}
      {%-   endif %}
      {%- endfor %}
      {{- _map -}}

- name: deployer | setup-isos | Show ISOs to be mounted
  debug:
    msg: "{{ iso_mounts }}"

- name: deployer | setup-isos | Create required mount point directories
  become: yes
  file:
    path: "{{ item.dir }}"
    state: directory
    follow: yes
  with_items: iso_mounts

- name: deployer | setup-isos | Mount CD-ROM devices on mount points
  become: yes
  shell: |
    set -eux
    set -o pipefail

    mounted_at()
    {
        mount | awk -v dev="${1}" '$1 == dev {print $3}'
    }

    mount_dev="{{ item.dev }}"
    mount_point="$(readlink -e {{ item.dir }})"

    # if device is mounted
    if [[ -n "$(mounted_at "${mount_dev}")" ]]; then
        # and not mounted on correct mount point
        if [[ "$(mounted_at "${mount_dev}")" != "${mount_point}" ]]; then
            umount "${mount_dev}"
        fi
    fi

    # if device is not mounted
    if [[ -z "$(mounted_at "${mount_dev}")" ]]; then
        mount "${mount_dev}" "${mount_point}"
    fi

  args:
    executable: "/bin/bash"
  with_items: iso_mounts
