#
# (c) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Perform the steps it is expected customers will perform manually to prep the deployer
---

- name: deployer | pre-init-deployer | Check for RHEL media
  stat:
    path: "{{ _deployer_iso_mounts.rhel }}"
  register: _pre_init_deployer_rhel_media

- name: deployer | pre-init-deployer | Check for SLES media
  stat:
    path: "{{ _deployer_iso_mounts.sles }}"
  register: _pre_init_deployer_sles_media

- name: deployer | pre-init-deployer | Check for SLES SDK media
  stat:
    path: "{{ _deployer_iso_mounts.sles_sdk }}"
  register: _pre_init_deployer_sles_sdk_media

- name: deployer | pre-init-deployer | Upload Guest Images
  copy:
    src: "{{ hlinux_artefacts_dir }}/{{ guest_images_archive[item].filename }}"
    dest: "/home/{{ image_build_user }}/{{ guest_images_archive[item].filename }}"
    owner: "{{ image_build_user }}"
    group: "{{ image_build_user }}"
    mode: 0444
  with_items: guest_images
  when: dev_env_use_guest_image_artifacts|bool

# Deploy with the user specified tarball
- debug: msg="Run with user specified tarball {{ user_specified_tarball }}"
  when: not deployer_tarball_stat_result.stat.exists and
        user_specified_tarball

- include: _run_deployer_tarball.yml
  vars:
    local_tarball_location: "{{ user_specified_tarball }}"
    deployer_tarball_location: "{{ user_specified_tarball | basename }}"
    input_model_dir: "{{ deployer_input_model_dir }}/ardana-input-model/2.0/ardana-ci"
  when: not deployer_tarball_stat_result.stat.exists and
        user_specified_tarball

# Deploy with the development tarball we just created during provisioning
- name: deployer | pre-init-deployer | Find local development tarball
  delegate_to: localhost
  shell: |
    set -eu
    set -o pipefail

    find {{ deployer_output_dir }} -maxdepth 1 -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
  args:
    executable: "/bin/bash"
  when: not deployer_tarball_stat_result.stat.exists and
        not user_specified_tarball
  register: _tarball_development_location_result
  failed_when: "_tarball_development_location_result.stdout == ''"

- debug: msg="Run with local development tarball {{ _tarball_development_location_result.stdout }}"
  when: not deployer_tarball_stat_result.stat.exists and
        not user_specified_tarball

- include: _run_deployer_tarball.yml
  vars:
    local_tarball_location: "{{ _tarball_development_location_result.stdout }}"
    deployer_tarball_location: "/home/{{ image_build_user }}/{{ _tarball_development_location_result.stdout | basename }}"
    input_model_dir: "{{ deployer_input_model_dir }}/ardana-input-model/2.0/ardana-ci"
  when: not deployer_tarball_stat_result.stat.exists and
        not user_specified_tarball

# Deploy with a release kit, that contains the deployertarball
- name: deployer | pre-init-deployer | Find deployer tarball on the release ISO
  shell: |
    set -eu
    set -o pipefail

    find {{ deployer_release_media }} -name *.tar -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
  args:
    executable: "/bin/bash"
  register: _tarball_location_result
  when: deployer_tarball_stat_result.stat.exists and
        not user_specified_tarball

- debug: msg="Run with release tarball. Located on ISO"
  when: deployer_tarball_stat_result.stat.exists and
        not user_specified_tarball

- include: _run_deployer_tarball.yml
  vars:
    deployer_tarball_location: "{{ _tarball_location_result.stdout }}"
    input_model_dir: "{{ artifact_cache_dir }}/input-model/ardana-input-model/2.0/ardana-ci"
  when: deployer_tarball_stat_result.stat.exists and
        not user_specified_tarball

# REHEL support
- name: deployer | pre-init-deployer | Setup RHEL media serving
  become: yes
  file:
    src: "{{ _deployer_iso_mounts.rhel }}"
    dest: "{{ PACKAGE_CONSTANTS.REPO_DIR }}/ardana/rhel7/yum/OS"
    state: link
  when: _pre_init_deployer_rhel_media.stat.exists

# SLES support
- name: deployer | pre-init-deployer | Test if we have the zypper repo directory
  stat:
    path: "{{ zypper_dir }}"
  register: _sles_zypper_dir_structrue_present
- debug: msg="{{ zypper_dir }}"

- name: deployer | pre-init-deployer | Setup SLES media serving
  become: yes
  file:
    src: "{{ _deployer_iso_mounts.sles }}"
    dest: "{{ zypper_dir }}/OS"
    state: link
  when: _pre_init_deployer_sles_media.stat.exists and
    _sles_zypper_dir_structrue_present.stat.isdir is defined and
    _sles_zypper_dir_structrue_present.stat.isdir

- name: deployer | pre-init-deployer | Setup SLES SDK media serving
  become: yes
  file:
    src: "{{ _deployer_iso_mounts.sles_sdk }}"
    dest: "{{ zypper_dir }}/SDK"
    state: link
  when: _pre_init_deployer_sles_sdk_media.stat.exists and
    _sles_zypper_dir_structrue_present.stat.isdir is defined and
    _sles_zypper_dir_structrue_present.stat.isdir

# Test are configuration files were setup correctly.
- name: deployer | pre-init-deployer | Check links in config dir
  command: ls -lLR "/home/{{ image_build_user }}/openstack/my_cloud/config/"

# BUG-2532 - The following configuration are made to our input. This only applies
# to virtual installs with ardana-dev-tools and is used to optimize the virtual install
# where our controllers only have 10 gigs of memory.
- name: deployer | pre-init-deployer | Test config files exist
  stat:
    path: "{{ item.dest }}"
  register: _deployer_virtual_configuration_file_exists_results
  with_items: _deployer_virtual_configuration

- name: deployer | pre-init-deployer | Configure virtual services
  lineinfile:
    dest: "{{ item.item.dest }}"
    regexp: "{{ item.item.regexp }}"
    line: "{{ item.item.line }}"
    insertafter: "{{ item.item.insertafter|default() }}"
    backrefs: "{{ item.item.backrefs | default(False) }}"
    follow: yes
    state: present
  when: item.stat.exists
  with_items: _deployer_virtual_configuration_file_exists_results.results

- name: deployer | pre-init-deployer | Save the virtual configuration
  shell: |
    set -eu

    git add -A
    git commit --allow-empty -m "Provision save virtual configuration"
  args:
    chdir: "~/openstack"
    executable: "/bin/bash"

### IMPORTANT NOTE ###
# This code patches Ansible source for CI to enable max_fail_percentage
# configuration. Currently in Ansible you cannot configure this either
# via environment or config file. As we cannot currently release this
# this code we patch the files in CI run only to make it fail fast.
- name: deployer | pre-init-deployer | Enable max_fail_percentage configuration by patching constants.py
  become: yes
  lineinfile:
    dest: /opt/stack/service/ansible/venv/lib/python2.7/site-packages/ansible/constants.py
    line: "DEFAULT_MAX_FAIL_PCT = get_config(p, DEFAULTS, 'max_fail_percentage', 'ANSIBLE_MAX_FAIL_PERCENTAGE', 100, integer=True)"
    state: present

- name: deployer | pre-init-deployer | Enable max_fail_percentage configuration by patching play.py
  become: yes
  lineinfile:
    dest: /opt/stack/service/ansible/venv/lib/python2.7/site-packages/ansible/playbook/play.py
    regexp: '(^\s+self.max_fail_pct\s+=\s+.*, )\d+(.*)'
    line: '\1C.DEFAULT_MAX_FAIL_PCT\2'
    backrefs: yes
    state: present

- name: deployer | pre-iinit-deployer | mkdir stage/images for VM factory qcow2
  file:
     path: "/home/{{ image_build_user }}/stage/images"
     state: directory
  when: dev_env_use_hlinux_artifacts|bool

- name: deployer | pre-init-deployer | Upload VM Factory image
  copy:
    src: "{{ image_build_output_dir}}/hlinux.qcow2"
    dest: "/home/{{ image_build_user }}/stage/images/hlinux.qcow2"
    owner: "{{ image_build_user }}"
    group: "{{ image_build_user }}"
    mode: 0400
  when: dev_env_use_hlinux_artifacts|bool

- name: deployer | pre-init-deployer | Upload OVA image into deployer
  become: yes
  copy:
    src: "{{ image_build_output_dir}}/ova/hlinux.ova"
    dest: "{{ PACKAGE_CONSTANTS.REPO_DIR }}/{{ deployer_version }}/ova_images/hlinux.ova"
    owner: "{{ image_build_user }}"
    group: "{{ image_build_user }}"
    mode: 0644
  when: "{{ lookup('env', 'BUILD_HLINUX_OVA') | default(False, true) }}"
