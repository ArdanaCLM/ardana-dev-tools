#
# (c) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
#  Create the tarball from the files staged in the scratch dir
---
# First create the constituent parts

- name: deployer | _create_deployer_tarball | List ardana-input-model/2.0 directories
  command: find "ardana-input-model/2.0" -maxdepth 1 -type d
  args:
    chdir: "{{ deployer_input_model_dir }}"
  register: ardana_input_model_builder
  changed_when: True

- name: deployer | _create_deployer_tarball | Create component tarballs
  command: >
    tar {{ item.tar_option | default('achf') }}
    {{ deployer_output_dir }}/{{ item.target_tar }}
    --owner='root' --group='root'
    --hard-dereference --exclude=".git*"
    -l
    {{ ( item.include | default(['.']) ) | join(' ') }}
  args:
    chdir: "{{ item.source_dir }}"
    creates: "{{ deployer_output_dir }}/{{ item.target_tar }}"
  when: ( item.when_cond is not defined ) or ( item.when_cond|bool )
  with_items:
    - source_dir: "{{ deployer_ansible_dir }}"
      target_tar: "{{ deployer_ansible_tarball }}"

    - source_dir: "{{ deployer_input_model_dir }}"
      target_tar: "{{ deployer_input_model_tarball }}"
      include: >
        {{ ardana_input_model_builder.stdout_lines |
           intersect(['ardana-input-model/2.0/services', 'ardana-input-model/2.0/examples',
                      'ardana-input-model/2.0/tech-preview']) }}

    - source_dir: "{{ deployer_hlinux_venv_dir }}"
      target_tar: "{{ deployer_hlinux_venv_tarball }}"

    - source_dir: "{{ deployer_config_dir }}"
      target_tar: "{{ deployer_config_tarball }}"
      tar_option: acf

    - source_dir: "{{ deployer_rhel7_venv_dir }}"
      target_tar: "{{ deployer_rhel7_venv_tarball }}"
      when_cond: "{{ dev_env_use_rhel7_artifacts }}"

    - source_dir: "{{ deployer_sles12_venv_dir }}"
      target_tar: "{{ deployer_sles12_venv_tarball }}"
      when_cond: "{{ dev_env_use_sles12_artifacts }}"

    - source_dir: "{{ deployer_ardana_extensions_dir }}"
      target_tar: "{{ deployer_ardana_extensions_tarball }}"

- name: deployer | _create_deployer_tarball | Copy init script into place and version it
  template:
    src: ardana-init.bash.j2
    dest: "{{ deployer_output_dir }}/{{ deployer_init_script }}"
    mode: 0755

- name: deployer | _create_deployer_tarball | Add build manifest to deployer tarball
  copy:
    src: "{{ venv_build_manifest }}"
    dest: "{{ build_manifest }}"

# Optionally install RHEL tarballs, if they are requested
- name: deployer | _create_deployer_tarball | Add RHEL yum tarball into deployer tarball
  copy:
    src: "{{ rhel7_yum_extras_tarball }}"
    dest: "{{ deployer_output_dir }}/{{ deployer_rhel7_yum_extras_tarball }}"
  when: dev_env_use_rhel7_artifacts|bool

# Optionally install SUSE tarballs, if they are requested
- name: deployer | _create_deployer_tarball | Add SUSE zypper tarball into deployer tarball
  copy:
    src: "{{ sles12_zypper_extras_tarball }}"
    dest: "{{ deployer_output_dir }}/{{ deployer_sles_zypper_extras_tarball }}"
  when: dev_env_use_sles12_artifacts|bool

# Now combine to the full deployer package
- name: deployer | _create_deployer_tarball | Create Deployer tarball
  command: >
    tar achf {{ tarball_location }}
    --owner='root' --group='root'
    --hard-dereference
    -l
    {{ deployer_version }}
  args:
    chdir: "{{ deployer_output_dir }}"
    creates: "{{ tarball_location }}"

- name: deployer | _create_deployer_tarball | Save artifact pointer
  include: ../../artifact-publisher/tasks/save-artifact.yml
  vars:
    type: "deployer"
    branch: "{{ dev_env_artifact_branch }}"
    version: "{{ deployer_version }}"
    filename: "{{ tarball_location }}"
