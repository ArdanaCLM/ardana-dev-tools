#
# (c) Copyright 2015-2016 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Network setup for Neutron provider net routing
---

- name: dev-env | route_provider_nets | Add the 802.1q module
  modprobe:
    name: 8021q
    state: present

- name: dev-env | route_provider_nets | Remove vlans from virtual bridge
  command: vconfig rem vlan{{ item.vlan }}
  with_items: "{{ dev_env_provider_net.octavia_net }}"
  register: _vconfig_rem_result
  failed_when:
    - _vconfig_rem_result is failed
    - not ('No such device' in _vconfig_rem_result.stderr)

- name: dev-env | route_provider_nets | Set the vlan naming convention
  command: vconfig set_name_type VLAN_PLUS_VID_NO_PAD

- name: dev-env | route_provider_nets | Find bridge name of mgmt-net interface
  set_fact:
    bridge_if: >-
      {%- for _if_name in ansible_interfaces if not _if_name.endswith('-nic') %}
      {%- set _if_fact = 'ansible_' ~ _if_name %}
      {%- set _if = hostvars[inventory_hostname][_if_fact] %}
      {%-   if _if.ipv4 is defined %}
      {%-     if _if.ipv4.address is defined %}
      {%-       if _if.ipv4.address == dev_env_provider_net.bridge_ip %}
      {{- _if.device }}
      {%-       endif %}
      {%-     endif %}
      {%-   endif %}
      {%- endfor %}

- name: dev-env | route_provider_nets | Create vlans on virtual bridge
  command: vconfig add {{ bridge_if }} {{ item.vlan }}
  with_items: "{{ dev_env_provider_net.octavia_net }}"

- name: dev-env | route_provider_nets | Bring up the ip link for vlans
  command: ip link set vlan{{ item.vlan }} up
  with_items: "{{ dev_env_provider_net.octavia_net }}"

- name: dev-env | route_provider_nets | Add provider net gateway IP address
  command: ip addr add {{ item.netmask }} dev vlan{{ item.vlan }}
  with_items: "{{ dev_env_provider_net.octavia_net }}"

- name: dev-env | route_provider_nets | Find the bridge name for Ardana net
  set_fact:
    ardana_bridge_if: >-
      {%- for _if_name in ansible_interfaces if not _if_name.endswith('-nic') %}
      {%- set _if_fact = 'ansible_' ~ _if_name %}
      {%- set _if = hostvars[inventory_hostname][_if_fact] %}
      {%-   if _if.ipv4 is defined %}
      {%-     if _if.ipv4.address is defined %}
      {%-       if _if.ipv4.address == "192.168.245.1" %}
      {{- _if.device }}
      {%-       endif %}
      {%-     endif %}
      {%-   endif %}
      {%- endfor %}

- name: dev-env | route_provider_nets | Enable packet forwarding
  shell: >-
    iptables -I FORWARD 1 -d 192.168.245.0/24
    -o {{ ardana_bridge_if }} -j ACCEPT
  failed_when: false
