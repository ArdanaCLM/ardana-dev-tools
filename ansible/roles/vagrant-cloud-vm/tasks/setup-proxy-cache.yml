#
# (c) Copyright 2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Tasks to setup persistent proxy cache file system.
#
# Expects following variables to be set:
#   ardana_proxy_cache_volume: <name of libvirt volume>
#   ardana_proxy_cache_bus: <volume controller bus type>
#   ardana_proxy_cache_pool: <optional name of libvirt pool hosting volume>
---

- name: vagrant-cloud-vm | setup-proxy-cache | Retrieve system-uuid info
  become: yes
  command: dmidecode --string system-uuid
  register: _system_uuid_result
  changed_when:
    - false  # we don't want this to be considered changed

- name: vagrant-cloud-vm | setup-proxy-cache | Get proxy cache volume path
  delegate_to: localhost
  become: yes
  command: >
    virsh vol-path
        --pool {{ ardana_proxy_cache_pool | default('default') }}
        {{ ardana_proxy_cache_volume }}
  register: _virsh_volpath_result
  changed_when:
    - false  # we don't want this to be considered changed

- name: vagrant-cloud-vm | setup-proxy-cache | Set libvirt facts
  set_fact:
    _libvirt_uuid: "{{ _system_uuid_result.stdout | lower }}"
    _volume_path: "{{ _virsh_volpath_result.stdout }}"

- name: vagrant-cloud-vm | setup-proxy-cache | Get proxy cache libvirt device name
  delegate_to: localhost
  become: yes
  shell: |
    set -eu

    virsh domblklist {{ _libvirt_uuid }} | \
        awk -v vpath={{ _volume_path }} '$2 == vpath {print $1}'
  register: _virsh_domblklist_result
  changed_when:
    - false  # we don't want this to be considered changed

- name: vagrant-cloud-vm | setup-proxy-cache | Extract proxy cache device name
  set_fact:
    _proxy_cache_dev_name: "{{ _virsh_domblklist_result.stdout }}"

#
# TODO(fergal) - Handle virtio based disk device for proxy cache volume
#

- name: vagrant-cloud-vm | setup-proxy-cache | Determine proxy cache device lun
  set_fact:
    _proxy_cache_dev_lun: "{{ 'abcdefghijklmnopqrstuvwxyz'.index(_proxy_cache_dev_name[2]) }}"
  when:
    - ardana_proxy_cache_bus == 'scsi'

- name: vagrant-cloud-vm | setup-proxy-cache | Fail if not expected SCSI lun
  fail:
    msg: >
      The persistent proxy cache volume should be lun
      {{ ardana_proxy_cache_lun }} not {{ _proxy_cache_dev_lun }}
  when:
    - ardana_proxy_cache_bus == 'scsi'
    - (ardana_proxy_cache_lun | int) != (_proxy_cache_dev_lun | int)

- name: vagrant-cloud-vm | setup-proxy-cache | Find the proxy cache device
  become: yes
  shell: |
    set -eu
    pd=$(find /sys/devices -path "*/[0-9]:0:0:{{ _proxy_cache_dev_lun }}/block/sd*" -name "sd[a-z]")

    basename "${pd}"
  register: _find_proxy_lun_device_result
  when:
    - ardana_proxy_cache_bus == 'scsi'

- name: vagrant-cloud-vm | setup-proxy-cache | Determine proxy cache device
  set_fact:
    _proxy_cache_device: "/dev/{{ _find_proxy_lun_device_result.stdout }}"
  when:
    - ardana_proxy_cache_bus == 'scsi'

- name: vagrant-cloud-vm | setup-proxy-cache | Create proxy cache file system
  become: yes
  filesystem:
    dev: "{{ _proxy_cache_device }}"
    fstype: "{{ cloud.deployer.caching_proxy.fs.type }}"

- name: vagrant-cloud-vm | setup-proxy-cache | Mount proxy cache file system
  become: yes
  mount:
    name: "{{ cloud.deployer.caching_proxy.fs.mount }}"
    src: "{{ _proxy_cache_device }}"
    fstype: "{{ cloud.deployer.caching_proxy.fs.type }}"
    state: mounted
