#
# (c) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Expand the partition backing the root file system of the VM to fill the
# disk and grow the root filesystem to an appropriate size to support the
# initial phases of an Ardana deployment before osconfig-run.yml applies
# the file system layout settings defined in the input model.
---

- name: vagrant-vm | setup-root-partition | Get root fs mount details
  set_fact:
    root_mount: >
      {{ ansible_mounts | selectattr('mount', 'equalto', '/') | first }}

- name: vagrant-vm | setup-root-partition | Set list of required tools
  set_fact:
    _required_tools: >
      {%- set _req_tools = vagrant_part_resize_tools.basic -%}
      {%- if root_mount.device.startswith('/dev/mapper') -%}
      {%-   set _ = _req_tools.extend(vagrant_part_resize_tools.lvm) -%}
      {%- endif -%}
      {{- _req_tools -}}

- name: vagrant-vm | setup-root-partition | Check for required tools
  become: yes
  command: >
    which {{ item }}
  register: _which_result
  changed_when: False
  failed_when:
    - _which_result.rc > 1
  with_items: _required_tools
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: vagrant-vm | setup-root-partition | Fail if required tools not found
  fail:
    # NOTE: blank line at start of msg text is intentional
    msg: |

      Required tools are missing from the Vagrant VM image:
      {% for r in _which_result.results %}
      {%   if r.rc %}
          {{ r.item }}
      {%   endif %}
      {% endfor %}
  when:
    - _which_result.results | selectattr("rc") | list | length > 0

- name: vagrant-vm | setup-root-partition | setup root fs settings for non-LVM
  set_fact:
    root_fs_dev_path: "{{ root_mount.device }}"
    root_fs_dev_name: "{{ root_mount.device | basename }}"
  when:
    - not root_mount.device.startswith('/dev/mapper')

- name: vagrant-vm | setup-root-partition | determine VG & LV for root device
  become: yes
  command: >
    lvs
      -o-lv_all -o-vg_all -o vg_name,lv_name
      --noheadings
      --nameprefixes
      --unquoted
      {{ root_mount.device }}
  register: _lvs_root_device_result
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: vagrant-vm | setup-root-partition | extract VG & LV for root filesystem
  set_fact:
    root_vg: >
      {{ _lvs_root_device_result.stdout.strip().split(' ')[0].split('=')[1] }}
    root_lv: >
      {{ _lvs_root_device_result.stdout.strip().split(' ')[1].split('=')[1] }}
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: vagrant-vm | setup-root-partition | determine PV backing root device
  become: yes
  command: >
    vgs
      -o-pv_all -o-vg_all -o pv_name
      --noheadings
      --nameprefixes
      --unquoted
      {{ root_vg }}
  register: _vgs_root_vg_result
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: vagrant-vm | setup-root-partition | extract PV backing root filesystem
  set_fact:
    root_pv: >
      {{ _vgs_root_vg_result.stdout.strip().split(' ')[0].split('=')[1] }}
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: vagrant-vm | setup-root-partition | setup root fs settings for LVM
  set_fact:
    root_fs_dev_path: "{{ root_pv }}"
    root_fs_dev_name: "{{ root_pv | basename }}"
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: vagrant-vm | setup-root-partition | Determine root fs base device
  # NOTE: using shell rather than command here because we want to expand
  # the given path using shell file globbing to find the desired entry
  # under /sys/block.
  shell: >
    readlink -e /sys/block/*/{{ root_fs_dev_name | quote }}
  register: _root_dev_sys_block_result

- name: vagrant-vm | setup-root-partition | extract root fs base device
  set_fact:
    root_fs_base_dev: "/dev/{{ _root_dev_sys_block_result.stdout | dirname | basename }}"
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: vagrant-vm | setup-root-partition | Determine root fs device partition
  command: >
    cat /sys/block/{{ root_fs_base_dev | basename | quote }}/{{
                      root_fs_dev_name | quote }}/partition
  register: _read_sys_block_partition_result

- name: vagrant-vm | setup-root-partition | extract root fs device partition
  set_fact:
    root_fs_partition: "{{ _read_sys_block_partition_result.stdout | int }}"

- name: vagrant-vm | setup-root-partition | Print starting partition size
  become: yes
  command: parted --script {{ root_fs_base_dev }} print
  register: vagrant_vm_partitions

- debug:
    var: vagrant_vm_partitions

- name: vagrant-vm | setup-root-partition | Print starting filesystem size
  command: df -h /
  register: vagrant_vm_filesystems
  changed_when: False

- debug:
    var: vagrant_vm_filesystems

- name: vagrant-vm | setup-root-partition | Change fdisk start field number for single partition layout
  set_fact:
    vagrant_vm_fdisk_start_field: 3
  when:
    - root_fs_partition | int == 1

- name: vagrant-vm | setup-root-partition | Check if disk is much larger than root partition
  become: yes
  shell: fdisk -l {{ root_fs_base_dev }} | awk -v DEV={{ root_fs_dev_path }}
      '$1 == "Disk" && $NF == "sectors" { total = $(NF-1) }
       $1 == DEV { used = $({{ vagrant_vm_fdisk_start_field | int }}+1) }
       END { print int(total/used) }'
  register: vagrant_vm_disk_size
  changed_when: False

- name: vagrant-vm | setup-root-partition | Get the start sector of the root partition
  become: yes
  shell: fdisk -l {{ root_fs_base_dev }} | awk -v DEV={{ root_fs_dev_path }}
      '$1 == DEV { print ${{ vagrant_vm_fdisk_start_field | int }}; }'
  register: vagrant_vm_partition_start
  when:
    - vagrant_vm_disk_size.stdout != "inf"
    - (vagrant_vm_disk_size.stdout | int) > 1
  failed_when: (vagrant_vm_partition_start.stdout | int) == 0

# MBR and LVM based image
- name: vagrant-vm | setup-root-partition | Set resize command for MBR with LVM
  set_fact:
    vagrant_vm_resize_cmd: "\nd\n\nd\n\nn\ne\n\n\n\nn\nl\n{{ vagrant_vm_partition_start.stdout | int }}\n\nt\n5\n8e\nw\n"
  when:
    - vagrant_vm_partition_start.changed
    - vagrant_vm_partitions.stdout.find("gpt") < 0
    - (root_fs_partition | int > 4)
    - (vagrant_vm_disk_size.stdout | int) > 1

# MBR and non LVM based image
- name: vagrant-vm | setup-root-partition | Set resize command for MBR with non-LVM
  set_fact:
    vagrant_vm_resize_cmd: "\nd\nn\n\n\n{{ vagrant_vm_partition_start.stdout | int }}\n\na\nw\nq\n"
  when:
    - vagrant_vm_partition_start.changed
    - vagrant_vm_partitions.stdout.find("gpt") < 0
    - (root_fs_partition | int) <= 4
    - (vagrant_vm_disk_size.stdout | int) > 1

# GPT and LVM based image
- name: vagrant-vm | setup-root-partition | Set resize command for GPT with LVM
  set_fact:
    vagrant_vm_resize_cmd: "\nd\n\nn\n\n{{ vagrant_vm_partition_start.stdout | int }}\n\nw\n"
  when:
    - vagrant_vm_partition_start.changed
    - vagrant_vm_partitions.stdout.find("gpt") >= 0

# Need to rewrite GPT partition table after a virtual disk resize
- name: vagrant-vm | setup-root-partition | Rewrite GPT partition
  become: yes
  shell: echo -e "\nw\nY\nY\n" | gdisk {{ root_fs_base_dev }}
  register: vagrant_vm_refresh_gpt_table
  when:
    - vagrant_vm_partition_start.changed
    - vagrant_vm_partitions.stdout.find("gpt") >= 0

- name: vagrant-vm | setup-root-partition | Resize the partition
  become: yes
  shell: echo -e "{{ vagrant_vm_resize_cmd }}" | fdisk {{ root_fs_base_dev }}
  register: vagrant_vm_resize_partition
  when:
    - vagrant_vm_partition_start.changed
    - (vagrant_vm_disk_size.stdout | int) > 1
  failed_when: vagrant_vm_resize_partition.stdout.find("The partition table has been altered") < 1

- name: vagrant-vm | setup-root-partition | Read the modified partition
  become: yes
  shell: |
    set -e
    resizepart {{ root_fs_base_dev }} {{ root_fs_partition | int }} \
        $( fdisk -l {{ root_fs_base_dev }} | \
            awk -v DEV={{ root_fs_dev_path }} \
            '$1 == DEV && $NF ~ /Linux|LVM|filesystem/ { print $({{ vagrant_vm_fdisk_start_field | int }}+1)-$({{ vagrant_vm_fdisk_start_field | int }}); }')
  when:
    - not vagrant_vm_resize_partition | skipped

- name: vagrant-vm | setup-root-partition | check root vol size
  become: yes
  shell: >
    lvdisplay {{ root_vg }}/{{ root_lv }} | grep "Current LE" | awk '{print $3}'
  register: vagrant_lvm_root_size
  when:
    - root_mount.device.startswith('/dev/mapper')
  changed_when: False

- name: vagrant-vm | setup-root-partition | resize pv if necessary
  become: yes
  command: pvresize {{ root_pv }}
  when:
    - root_mount.device.startswith('/dev/mapper')
    - (vagrant_lvm_root_size.stdout | int) < 2000

# Resize to 24G which is 20% of 120G for swobj1
- name: vagrant-vm | setup-root-partition | Resize lv if necessary
  become: yes
  command: lvresize -L 24G /dev/{{ root_vg }}/{{ root_lv }}
  register: _lvresize_output
  failed_when: ( _lvresize_output.rc != 0 ) and ( "matches existing size" not in _lvresize_output.stderr )
  when:
    - root_mount.device.startswith('/dev/mapper')
    - (vagrant_lvm_root_size.stdout | int) < 2000

- name: vagrant-vm | setup-root-partition | Resize the filesystem
  become: yes
  command: resize2fs "{{ root_mount.device }}"
  register: vagrant_vm_resize_filesystem
  when:
    - not vagrant_vm_resize_partition | skipped

- name: vagrant-vm | setup-root-partition | Print finishing partition size
  become: yes
  command: parted {{ root_fs_base_dev }} print
  register: vagrant_vm_partitions
  when:
    - not vagrant_vm_resize_partition | skipped

- debug: var=vagrant_vm_partitions

- name: vagrant-vm | setup-root-partition | Print finishing filesystem size
  command: df -h /
  register: vagrant_vm_filesystems
  when:
    - not vagrant_vm_resize_filesystem | skipped

- debug: var=vagrant_vm_filesystems
