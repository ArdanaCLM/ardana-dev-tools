# Manifest for: {{ service }}
---

# Ardana environment
environment:
{% for line in _venv_lsb_release_result.stdout_lines %}
  {{ line | lower | regex_replace('\t', ' ') |
     regex_replace('(distributor) (id:)', '\\1_\\2') |
     regex_replace('(description: )(.*)', '\\1"\\2"') |
     lower }}
{% endfor %}
  deployer_version: {{ deployer_version }}
  pip_mirror: {{ pip_mirror }}

# Git source SHA1(s)
git:
  - name: ardana-dev-tools
    branch: {{ lookup('pipe', 'git rev-parse --abbrev-ref HEAD') }}
    url: {{ dev_env_default_git_server }}/ardana/ardana-dev-tools
    sha1: {{ _venv_git_dev_env_sha1_result.stdout }}
{% if _venv_git_sha1_result is defined and
      _venv_git_sha1_result.changed %}
{% for source in _venv_git_sha1_result.results %}
{% if source.item is defined %}
  - name: {{ source.item }}
    branch: {{ _venv_ardana_sources[ source.item ].branch }}
    url: {{ _venv_ardana_sources[ source.item ].url }}
    sha1: {{ source.stdout }}
{% endif %}
{% endfor %}
{% endif %}
{% if not(services[service].ignore_constraints | default(False)) %}

constraints:
  - repo: {{ _venv_global_constraints_sources.requirements.url }}
    tag: {{ _venv_git_repo_constraint_tag_result.stdout | default('No tag', true) }}
{% endif %}
{% if not ( _venv_pip_freeze_result | skipped ) %}

# Pip freeze output
pip: |
{{_venv_pip_freeze_result.stdout | indent(2, true)}}
{% endif %}
{% if not ( _venv_pip_version_result | skipped ) %}

# Pip version
pipver: |
{{_venv_pip_version_result.stdout | indent(2, true)}}
{% endif %}
{% if not ( _venv_setuptools_version_result | skipped ) %}

# Setuptools version
setuptools: |
{{_venv_setuptools_version_result.stdout | indent(2, true)}}
{% endif %}
{% if services[service].external is defined %}

# External files
external: |
{% for result in _venv_external_manifest.results %}
{{ result.stdout | indent(2, true) }}
{% endfor %}
{% endif %}
