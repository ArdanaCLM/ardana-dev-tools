#!/usr/bin/env python
#
# (c) Copyright 2015 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

Documentation = """
---
module: virsh_set_pxe_boot
short_description: set a named vm to either pxe boot or boot from hd
description: set a named vm to either pxe boot or boot from hd
options:
    name:
        required: true
        description:
            - The name of the domain
    set_pxe:
        required: true
        description:
            - If set to true set pxe boot else if false set to hd boot
    reset:
        required: false
        default: true
        description:
            -After setting the boot option reset the domain to pick up change
"""

Examples = """
#Example usage
- virsh_set_pxe_boot: name=standard-vagrant_ccn-0001 set_pxe=true
"""

import json
import libvirt
import os
import shlex
import sys
import xml.etree.ElementTree as ET


class virsh_helper(object):

    def __init__(self, module):
        self.module = module
        self.instance_name = module.params['name']
        self.set_pxe = module.params['set_pxe']
        self.reset = module.params['reset']
        self.syslogging = False
        self.changed = False

        self.conn = libvirt.open(None)
        if self.conn is None:
            raise ValueError('Failed to open connection to the hypervisor')
        try:
            self.dom = self.conn.lookupByName(self.instance_name)
        except:
            raise ValueError('Failed to find the main domain %s'
                             % (self.instance_name))
        self.xml = self.dom.XMLDesc(flags=(libvirt.VIR_DOMAIN_XML_SECURE))
        self.root = ET.fromstring(self.xml)

    def find_os_boot_params(self):
        remove_list = []
        os_tag = None
        for child in self.root:
            if child.tag == 'os':
                os_tag = child
                for os_param in os_tag:
                    if os_param.tag == 'boot':
                        remove_list.append(os_param)
                break
        return (os_tag, remove_list)

    def find_net2_boot_interface(self):
        remove_list = []
        net_count = 0
        net2_dev = None
        for child in self.root:
            if child.tag == 'devices':
                devices = child
                for device in devices:
                    # We are only interested in net2
                    if net2_dev is not None:
                        break
                    remove_list = []
                    if device.tag == 'interface' and \
                       device.attrib['type'] == 'network':
                        # There may be a better way to identify
                        net_count = net_count + 1
                        if net_count == 3:
                            net2_dev = device
                            for net_params in device:
                                if net_params.tag == 'boot':
                                    remove_list.append(net_params)
        return (net2_dev, remove_list)

    def set_pxe_boot(self):

        parent, remove_list = self.find_os_boot_params()
        for x in remove_list:
            parent.remove(x)
            self.changed = True
        parent, remove_list = self.find_net2_boot_interface()
        if len(remove_list) == 0:
            ET.SubElement(parent, 'boot', {'order': '1'})
            self.changed = True

    def set_hd_boot(self):

        parent, remove_list = self.find_os_boot_params()
        if len(remove_list) == 0:
            self.changed = True
            ET.SubElement(parent, 'boot', {'dev': 'hd'})

        parent, remove_list = self.find_net2_boot_interface()
        for x in remove_list:
            parent.remove(x)
            self.changed = True

    def commit(self):
        if not self.module.check_mode and self.changed:
            xml = ET.tostring(self.root)
            self.conn.defineXML(xml)

    def reset_instance(self):
        if not self.module.check_mode and self.changed:
            if self.dom.state()[0] != libvirt.VIR_DOMAIN_SHUTOFF:
                self.dom.destroy()  # halt the domain
            self.dom.create()   # start the domain

    def print_xml(self):
        ET.dump(self.root)


def main():

    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True, type='str'),
            set_pxe=dict(required=True, type='bool'),
            reset=dict(default=True, type='bool'),
        ),
        supports_check_mode=True
    )

    try:
        vh = virsh_helper(module)

        if vh.set_pxe:
            vh.set_pxe_boot()
        else:
            vh.set_hd_boot()

        vh.commit()

        if vh.reset:
            vh.reset_instance()
    except Exception, e:
        module.fail_json(msg="exception: %s" % e)

    module.exit_json(changed=vh.changed)

# import module snippets
from ansible.module_utils.basic import *
main()
